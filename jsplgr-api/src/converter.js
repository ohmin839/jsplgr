// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/

"use strict";


function calcScore(text) {
    return addScoreDialesis(text,
            addScoreBreath(text,
            addScoreAccent(text,
            addScoreIotaSubscriptum(text))));
}

function addScoreDialesis(text, score=0) {
    if (text.includes('"')) {
        return 4 ** 3 + score;
    } else {
        return score;
    }
}

function addScoreBreath(text, score=0) {
    if (text.includes("<")) {
        return 4 ** 2 * 1 + score;
    } else if (text.includes(">")) {
        return 4 ** 2 * 2 + score;
    } else {
        return score;
    }
}

function addScoreAccent(text, score=0) {
    if (text.includes("'")) {
        return 4 ** 1 * 1 + score;
    } else if (text.includes("`")) {
        return 4 ** 1 * 2 + score;
    } else if (text.includes("~")) {
        return 4 ** 1 * 3 + score;
    } else {
        return score;
    }
}

function addScoreIotaSubscriptum(text, score=0) {
    if (text.includes("|")) {
        return 1 + score;
    } else {
        return score;
    }
}

function convertToLargeAlpha(text) {
    let score = calcScore(text);
    switch (score) {
        case  1: return "\u1FBC"; // A|
        case  4: return "\u1FBB"; // 'A
        // case  5: return "\uxxxx"; // 'A|
        case  8: return "\u1FBA"; // `A
        // case  9: return "\uxxxx"; // `A|
        // case 12: return "\uxxxx"; // ~A
        // case 13: return "\uxxxx"; // ~A|
        case 16: return "\u1F09"; // <A
        case 17: return "\u1F89"; // <A|
        case 20: return "\u1F0D"; // <'A
        case 21: return "\u1F8D"; // <'A|
        case 24: return "\u1F0B"; // <`A
        case 25: return "\u1F8B"; // <`A|
        case 28: return "\u1F0F"; // <~A
        case 29: return "\u1F8F"; // <`A|
        case 32: return "\u1F08"; // >A
        case 33: return "\u1F88"; // >A|
        case 36: return "\u1F0C"; // >'A
        case 37: return "\u1F8C"; // >'A|
        case 40: return "\u1F0A"; // >`A
        case 41: return "\u1F8A"; // >`A|
        case 44: return "\u1F0E"; // >~A
        case 45: return "\u1F8E"; // >~A|
        default: return "\u0391"; // A        
    }
}

function convertToLargeEpsilon(text) {
    let score = calcScore(text);
    switch (score) {
        case  4: return "\u1FC9"; // 'E
        case  8: return "\u1FC8"; // `E
        case 16: return "\u1F19"; // <E
        case 20: return "\u1F1D"; // <'E
        case 24: return "\u1F1B"; // <`E
        case 32: return "\u1F18"; // >E
        case 36: return "\u1F1C"; // >'E
        case 40: return "\u1F1A"; // >`E
        default: return "\u0395"; // E        
    }
}

function convertToLargeEta(text) {
    let score = calcScore(text);
    switch (score) {
        case  1: return "\u1FCC"; // ^E|
        case  4: return "\u1FCB"; // '^E
        // case  5: return "\uxxxx"; // '^E|
        case  8: return "\u1FCA"; // `^E
        // case  9: return "\uxxxx"; // `^E|
        // case 12: return "\uxxxx"; // ~^E
        // case 13: return "\uxxxx"; // ~^E|
        case 16: return "\u1F29"; // <^E
        case 17: return "\u1F99"; // <^E|
        case 20: return "\u1F2D"; // <'^E
        case 21: return "\u1F9D"; // <'^E|
        case 24: return "\u1F2B"; // <`^E
        case 25: return "\u1F9B"; // <`^E|
        case 28: return "\u1F2F"; // <~^E
        case 29: return "\u1F9F"; // <`^E|
        case 32: return "\u1F28"; // >^E
        case 33: return "\u1F98"; // >^E|
        case 36: return "\u1F2C"; // >'^E
        case 37: return "\u1F9C"; // >'^E|
        case 40: return "\u1F2A"; // >`^E
        case 41: return "\u1F9A"; // >`^E|
        case 44: return "\u1F2E"; // >~^E
        case 45: return "\u1F9E"; // >~^E|
        default: return "\u0397"; // ^E
    }
}

function convertToLargeIota(text) {
    let score = calcScore(text);
    switch (score) {
        case  4: return "\u1FDB"; // 'I
        case  8: return "\u1FDA"; // `I
        // case  12: return "\uxxxx"; // ~I
        case 16: return "\u1F39"; // <I
        case 20: return "\u1F3D"; // <'I
        case 24: return "\u1F3B"; // <`I
        case 28: return "\u1F3F"; // <~I
        case 32: return "\u1F38"; // >I
        case 36: return "\u1F3C"; // >'I
        case 40: return "\u1F3A"; // >`I
        case 44: return "\u1F3E"; // >~I
        case 64: return "\u03AA"; // "I
        default: return "\u0399"; // I
    }
}

function convertToLargeOmicron(text) {
    let score = calcScore(text);
    switch (score) {
        case  4: return "\u1FF9"; // 'O
        case  8: return "\u1FF8"; // `O
        case 16: return "\u1F49"; // <O
        case 20: return "\u1F4D"; // <'O
        case 24: return "\u1F4B"; // <`O
        case 32: return "\u1F48"; // >O
        case 36: return "\u1F4C"; // >'O
        case 40: return "\u1F4A"; // >`O
        default: return "\u039F"; // O
    }
}

function convertToLargeUpsilon(text) {
    let score = calcScore(text);
    switch (score) {
        case  4: return "\u1FEB"; // 'Y
        case  8: return "\u1FEA"; // `Y
        // case  12: return "\uxxxx"; // ~Y
        case 16: return "\u1F59"; // <Y
        case 20: return "\u1F5D"; // <'Y
        case 24: return "\u1F5B"; // <`Y
        case 28: return "\u1F5F"; // <~Y
        case 64: return "\u03AB"; // "Y
        default: return "\u03A5"; // Y
    }
}

function convertToLargeOmega(text) {
    let score = calcScore(text);
    switch (score) {
        case  1: return "\u1FFC"; // ^O|
        case  4: return "\u1FFB"; // '^O
        // case  5: return "\uxxxx"; // '^O|
        case  8: return "\u1FFA"; // `^O
        // case  9: return "\uxxxx"; // `^O|
        // case 12: return "\uxxxx"; // ~^O
        // case 13: return "\uxxxx"; // ~^O|
        case 16: return "\u1F69"; // <^O
        case 17: return "\u1FA9"; // <^O|
        case 20: return "\u1F6D"; // <'^O
        case 21: return "\u1FAD"; // <'^O|
        case 24: return "\u1F6B"; // <`^O
        case 25: return "\u1FAB"; // <`^O|
        case 28: return "\u1F6F"; // <~^O
        case 29: return "\u1FAF"; // <`^O|
        case 32: return "\u1F68"; // >^O
        case 33: return "\u1FA8"; // >^O|
        case 36: return "\u1F6C"; // >'^O
        case 37: return "\u1FAC"; // >'^O|
        case 40: return "\u1F6A"; // >`^O
        case 41: return "\u1FAA"; // >`^O|
        case 44: return "\u1F6E"; // >~^O
        case 45: return "\u1FAE"; // >~^O|
        default: return "\u03A9"; // ^O
    }
}

function convertToLargeKappa(text) {
    if (text.endsWith("h")) {
        return "\u03A7"; // large khi
    } else {
        return "\u039A"; // large kappa
    }
}

function convertToLargePi(text) {
    if (text.endsWith("h")) {
        return "\u03A6"; // large phi
    } else if (text.endsWith("s")) {
        return "\u03A8"; // large psi
    } else {
        return "\u03A0"; // large pi
    }
}

function convertToLargeRho(text) {
    let score = calcScore(text);
    switch (score) {
        case 16: return "\u1FEC"; // <R
        default: return "\u03A1"; // R
    }
}

function convertToLargeTau(text) {
    if (text.endsWith("h")) {
        return "\u0398"; // large theta
    } else {
        return "\u03A4"; // large tau
    }
}

function convertToSmallAlpha(text) {
    let score = calcScore(text);
    switch (score) {
        case  1: return "\u1FB3"; // a|
        case  4: return "\u1F71"; // 'a
        case  5: return "\u1FB4"; // 'a|
        case  8: return "\u1F70"; // `a
        case  9: return "\u1FB2"; // `a|
        case 12: return "\u1FB6"; // ~a
        case 13: return "\u1FB7"; // ~a|
        case 16: return "\u1F01"; // <a
        case 17: return "\u1F81"; // <a|
        case 20: return "\u1F05"; // <'a
        case 21: return "\u1F85"; // <'a|
        case 24: return "\u1F03"; // <`a
        case 25: return "\u1F83"; // <`a|
        case 28: return "\u1F07"; // <~a
        case 29: return "\u1F87"; // <`a|
        case 32: return "\u1F00"; // >a
        case 33: return "\u1F80"; // >a|
        case 36: return "\u1F04"; // >'a
        case 37: return "\u1F84"; // >'a|
        case 40: return "\u1F02"; // >`a
        case 41: return "\u1F82"; // >`a|
        case 44: return "\u1F06"; // >~a
        case 45: return "\u1F86"; // >~a|
        default: return "\u03B1"; // a
    }
}

function convertToSmallEpsilon(text) {
    let score = calcScore(text);
    switch (score) {
        case  4: return "\u1F73"; // 'e
        case  8: return "\u1F72"; // `e
        case 16: return "\u1F11"; // <e
        case 20: return "\u1F15"; // <'e
        case 24: return "\u1F13"; // <`e
        case 32: return "\u1F10"; // >e
        case 36: return "\u1F14"; // >'e
        case 40: return "\u1F12"; // >`e
        default: return "\u03B5"; // e
    }
}

function convertToSmallEta(text) {
    let score = calcScore(text);
    switch (score) {
        case  1: return "\u1FC3"; // ^e|
        case  4: return "\u1F75"; // '^e
        case  5: return "\u1FC4"; // '^e|
        case  8: return "\u1F74"; // `^e
        case  9: return "\u1FC2"; // `^e|
        case 12: return "\u1FC6"; // ~^e
        case 13: return "\u1FC7"; // ~^e|
        case 16: return "\u1F21"; // <^e
        case 17: return "\u1F91"; // <^e|
        case 20: return "\u1F25"; // <'^e
        case 21: return "\u1F95"; // <'^e|
        case 24: return "\u1F23"; // <`^e
        case 25: return "\u1F93"; // <`^e|
        case 28: return "\u1F27"; // <~^e
        case 29: return "\u1F97"; // <`^e|
        case 32: return "\u1F20"; // >^e
        case 33: return "\u1F90"; // >^e|
        case 36: return "\u1F24"; // >'^e
        case 37: return "\u1F94"; // >'^e|
        case 40: return "\u1F22"; // >`^e
        case 41: return "\u1F92"; // >`^e|
        case 44: return "\u1F26"; // >~^e
        case 45: return "\u1F96"; // >~^e|
        default: return "\u03B7"; // ^e
    }
}

function convertToSmallIota(text) {
    let score = calcScore(text);
    switch (score) {
        case  4: return "\u1F77"; // 'i
        case  8: return "\u1F76"; // `i
        case 12: return "\u1FD6"; // ~i
        case 16: return "\u1F31"; // <i
        case 20: return "\u1F35"; // <'i
        case 24: return "\u1F33"; // <`i
        case 28: return "\u1F37"; // <~i
        case 32: return "\u1F30"; // >i
        case 36: return "\u1F34"; // >'i
        case 40: return "\u1F32"; // >`i
        case 44: return "\u1F36"; // >~i
        case 64: return "\u03CA"; // "i
        case 68: return "\u1FD3"; // "'i
        case 72: return "\u1FD2"; // "`i
        case 76: return "\u1FD7"; // "~i
        default: return "\u03B9"; // i 
    }
}

function convertToSmallOmicron(text) {
    let score = calcScore(text);
    switch (score) {
        case  4: return "\u1F79"; // 'o
        case  8: return "\u1F78"; // `o
        case 16: return "\u1F41"; // <o
        case 20: return "\u1F45"; // <'o
        case 24: return "\u1F43"; // <`o
        case 32: return "\u1F40"; // >o
        case 36: return "\u1F44"; // >'o
        case 40: return "\u1F42"; // >`o
        default: return "\u03BF"; // o
    }
}

function convertToSmallUpsilon(text) {
    let score = calcScore(text);
    switch (score) {
        case  4: return "\u1F7B"; // 'y
        case  8: return "\u1F7A"; // `y
        case 12: return "\u1FE6"; // ~y
        case 16: return "\u1F51"; // <y
        case 20: return "\u1F55"; // <'y
        case 24: return "\u1F53"; // <`y
        case 28: return "\u1F57"; // <~y
        case 32: return "\u1F50"; // >y
        case 36: return "\u1F54"; // >'y
        case 40: return "\u1F52"; // >`y
        case 44: return "\u1F56"; // >~y
        case 64: return "\u03CB"; // "y
        case 68: return "\u1FE3"; // "'y
        case 72: return "\u1FE2"; // "`y
        case 76: return "\u1FE7"; // "~y
        default: return "\u03C5"; // y
    }
}

function convertToSmallOmega(text) {
    let score  = calcScore(text);
    switch (score) {
        case  1: return "\u1FF3"; // ^o|
        case  4: return "\u1F7D"; // '^o
        case  5: return "\u1FF4"; // '^o|
        case  8: return "\u1F7C"; // `^o
        case  9: return "\u1FF2"; // `^o|
        case 12: return "\u1FF6"; // ~^o
        case 13: return "\u1FF7"; // ~^o|
        case 16: return "\u1F61"; // <^o
        case 17: return "\u1FA1"; // <^o|
        case 20: return "\u1F65"; // <'^o
        case 21: return "\u1FA5"; // <'^o|
        case 24: return "\u1F63"; // <`^o
        case 25: return "\u1FA3"; // <`^o|
        case 28: return "\u1F67"; // <~^o
        case 29: return "\u1FA7"; // <`^o|
        case 32: return "\u1F60"; // >^o
        case 33: return "\u1FA0"; // >^o|
        case 36: return "\u1F64"; // >'^o
        case 37: return "\u1FA4"; // >'^o|
        case 40: return "\u1F62"; // >`^o
        case 41: return "\u1FA2"; // >`^o|
        case 44: return "\u1F66"; // >~^o
        case 45: return "\u1FA6"; // >~^o|
        default: return "\u03C9"; // ^o
    }
}

function convertToSmallKappa(text) {
    if (text.endsWith("h")) {
        return "\u03C7"; // small khi
    } else {
        return "\u03BA"; // small kappa
    }
}

function convertToSmallPi(text) {
    if (text.includes("h")) {
        return "\u03C6"; // small phi
    } else if (text.includes("s")) {
        return "\u03C8"; // small psi
    } else {
        return "\u03C0"; // small pi
    }
}

function convertToSmallRho(text) {
    let score = calcScore(text);
    switch (score) {
        case 16: return "\u1FE5";
        case 32: return "\u1FE4";
        default: return "\u03C1";
    }
}

function convertToSmallSigma(text) {
    if (text == "s") {
        return "\u03C2"; // final sigma 
    } else {
        return "\u03C3"; // non final sigma
    }
}

function convertToSmallTau(text) {
    if (text.includes("h")) {
        return "\u03B8";
    } else {
        return "\u03C4";
    }
}


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "A";
  var peg$c1 = "|";
  var peg$c2 = "E";
  var peg$c3 = "^E";
  var peg$c4 = "I";
  var peg$c5 = "O";
  var peg$c6 = "^O";
  var peg$c7 = "B";
  var peg$c8 = "G";
  var peg$c9 = "D";
  var peg$c10 = "Z";
  var peg$c11 = "K";
  var peg$c12 = "h";
  var peg$c13 = "L";
  var peg$c14 = "M";
  var peg$c15 = "N";
  var peg$c16 = "X";
  var peg$c17 = "P";
  var peg$c18 = "<";
  var peg$c19 = "R";
  var peg$c20 = "S";
  var peg$c21 = "T";
  var peg$c22 = "a";
  var peg$c23 = "e";
  var peg$c24 = "^e";
  var peg$c25 = "i";
  var peg$c26 = "o";
  var peg$c27 = "^o";
  var peg$c28 = "b";
  var peg$c29 = "g";
  var peg$c30 = "d";
  var peg$c31 = "z";
  var peg$c32 = "k";
  var peg$c33 = "l";
  var peg$c34 = "m";
  var peg$c35 = "n";
  var peg$c36 = "x";
  var peg$c37 = "p";
  var peg$c38 = "r";
  var peg$c39 = "s";
  var peg$c40 = "t";
  var peg$c41 = ";";
  var peg$c42 = "?";
  var peg$c43 = "\r";
  var peg$c44 = "\n";

  var peg$r0 = /^[<>]/;
  var peg$r1 = /^['`~]/;
  var peg$r2 = /^['`]/;
  var peg$r3 = /^[<>"]/;
  var peg$r4 = /^[UY]/;
  var peg$r5 = /^[hs]/;
  var peg$r6 = /^[uy]/;
  var peg$r7 = /^[cs]/;

  var peg$e0 = peg$classExpectation(["<", ">"], false, false);
  var peg$e1 = peg$classExpectation(["'", "`", "~"], false, false);
  var peg$e2 = peg$literalExpectation("A", false);
  var peg$e3 = peg$literalExpectation("|", false);
  var peg$e4 = peg$classExpectation(["'", "`"], false, false);
  var peg$e5 = peg$literalExpectation("E", false);
  var peg$e6 = peg$literalExpectation("^E", false);
  var peg$e7 = peg$classExpectation(["<", ">", "\""], false, false);
  var peg$e8 = peg$literalExpectation("I", false);
  var peg$e9 = peg$literalExpectation("O", false);
  var peg$e10 = peg$classExpectation(["U", "Y"], false, false);
  var peg$e11 = peg$literalExpectation("^O", false);
  var peg$e12 = peg$literalExpectation("B", false);
  var peg$e13 = peg$literalExpectation("G", false);
  var peg$e14 = peg$literalExpectation("D", false);
  var peg$e15 = peg$literalExpectation("Z", false);
  var peg$e16 = peg$literalExpectation("K", false);
  var peg$e17 = peg$literalExpectation("h", false);
  var peg$e18 = peg$literalExpectation("L", false);
  var peg$e19 = peg$literalExpectation("M", false);
  var peg$e20 = peg$literalExpectation("N", false);
  var peg$e21 = peg$literalExpectation("X", false);
  var peg$e22 = peg$literalExpectation("P", false);
  var peg$e23 = peg$classExpectation(["h", "s"], false, false);
  var peg$e24 = peg$literalExpectation("<", false);
  var peg$e25 = peg$literalExpectation("R", false);
  var peg$e26 = peg$literalExpectation("S", false);
  var peg$e27 = peg$literalExpectation("T", false);
  var peg$e28 = peg$literalExpectation("a", false);
  var peg$e29 = peg$literalExpectation("e", false);
  var peg$e30 = peg$literalExpectation("^e", false);
  var peg$e31 = peg$literalExpectation("i", false);
  var peg$e32 = peg$literalExpectation("o", false);
  var peg$e33 = peg$classExpectation(["u", "y"], false, false);
  var peg$e34 = peg$literalExpectation("^o", false);
  var peg$e35 = peg$literalExpectation("b", false);
  var peg$e36 = peg$literalExpectation("g", false);
  var peg$e37 = peg$literalExpectation("d", false);
  var peg$e38 = peg$literalExpectation("z", false);
  var peg$e39 = peg$literalExpectation("k", false);
  var peg$e40 = peg$literalExpectation("l", false);
  var peg$e41 = peg$literalExpectation("m", false);
  var peg$e42 = peg$literalExpectation("n", false);
  var peg$e43 = peg$literalExpectation("x", false);
  var peg$e44 = peg$literalExpectation("p", false);
  var peg$e45 = peg$literalExpectation("r", false);
  var peg$e46 = peg$literalExpectation("s", false);
  var peg$e47 = peg$classExpectation(["c", "s"], false, false);
  var peg$e48 = peg$literalExpectation("t", false);
  var peg$e49 = peg$literalExpectation(";", false);
  var peg$e50 = peg$literalExpectation("?", false);
  var peg$e51 = peg$literalExpectation("\r", false);
  var peg$e52 = peg$literalExpectation("\n", false);
  var peg$e53 = peg$anyExpectation();

  var peg$f0 = function(ls) {
    return ls.join("");
};
  var peg$f1 = function(text) {
    return convertToLargeAlpha(text);
};
  var peg$f2 = function(text) {
    return convertToLargeEpsilon(text);
};
  var peg$f3 = function(text) {
    return convertToLargeEta(text);
};
  var peg$f4 = function(text) {
    return convertToLargeIota(text);    
};
  var peg$f5 = function(text) {
    return convertToLargeOmicron(text);
};
  var peg$f6 = function(text) {
    return convertToLargeUpsilon(text);
};
  var peg$f7 = function(text) {
    return convertToLargeOmega(text);
};
  var peg$f8 = function() {
    return "\u0392";
};
  var peg$f9 = function() {
    return "\u0393";
};
  var peg$f10 = function() {
    return "\u0394";
};
  var peg$f11 = function() {
    return "\u0396";
};
  var peg$f12 = function(text) {
    return convertToLargeKappa(text);
};
  var peg$f13 = function() {
    return "\u039B";
};
  var peg$f14 = function() {
    return "\u039C";
};
  var peg$f15 = function(suffix) {
    return "\u0393" + suffix;
};
  var peg$f16 = function(suffix) {
    return "\u0393" + suffix;
};
  var peg$f17 = function(suffix) {
    return "\u0393" + suffix;
};
  var peg$f18 = function() {
    return "\u039D";
};
  var peg$f19 = function() {
    return "\u039E";
};
  var peg$f20 = function(text) {
    return convertToLargePi(text);
};
  var peg$f21 = function(text) {
    return convertToLargeRho(text);
};
  var peg$f22 = function() {
    return "\u03A3";
};
  var peg$f23 = function(text) {
    return convertToLargeTau(text);
};
  var peg$f24 = function(text) {
    return convertToSmallAlpha(text);
};
  var peg$f25 = function(text) {
    return convertToSmallEpsilon(text);
};
  var peg$f26 = function(text) {
    return convertToSmallEta(text);
};
  var peg$f27 = function(text) {
    return convertToSmallIota(text);
};
  var peg$f28 = function(text) {
    return convertToSmallOmicron(text);
};
  var peg$f29 = function(text) {
    return convertToSmallUpsilon(text);
};
  var peg$f30 = function(text) {
    return convertToSmallOmega(text);
};
  var peg$f31 = function() {
    return  "\u03B2";
};
  var peg$f32 = function() {
    return  "\u03B3";
};
  var peg$f33 = function() {
    return  "\u03B4";
};
  var peg$f34 = function() {
    return  "\u03B6";
};
  var peg$f35 = function(text) {
    return convertToSmallKappa(text);
};
  var peg$f36 = function() {
    return "\u03BB";
};
  var peg$f37 = function() {
    return "\u03BC";
};
  var peg$f38 = function(suffix) {
    return "\u03B3" + suffix;
};
  var peg$f39 = function(suffix) {
    return "\u03B3" + suffix;
};
  var peg$f40 = function(suffix) {
    return "\u03B3" + suffix;
};
  var peg$f41 = function() {
    return "\u03BD";
};
  var peg$f42 = function() {
    return "\u03BE";
};
  var peg$f43 = function(text) {
    return convertToSmallPi(text);
};
  var peg$f44 = function(text) {
    return convertToSmallRho(text);
};
  var peg$f45 = function(a) {
    return "\u03C3" + a;
};
  var peg$f46 = function(text) {
    return convertToSmallSigma(text);
};
  var peg$f47 = function(text) {
    return convertToSmallTau(text);
};
  var peg$f48 = function() {
    return "\u0387";
};
  var peg$f49 = function() {
    return "\u037E";
};
  var peg$f50 = function(text) {
    return text;
};
  var peg$f51 = function(text) {
    return text;
};
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0;

    s0 = peg$parseletters();

    return s0;
  }

  function peg$parseletters() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseletter();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseletter();
    }
    peg$savedPos = s0;
    s1 = peg$f0(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseletter() {
    var s0;

    s0 = peg$parsealphabet();
    if (s0 === peg$FAILED) {
      s0 = peg$parsepunctuation();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenewline();
        if (s0 === peg$FAILED) {
          s0 = peg$parseanyChar();
        }
      }
    }

    return s0;
  }

  function peg$parsealphabet() {
    var s0;

    s0 = peg$parselargeAlpha();
    if (s0 === peg$FAILED) {
      s0 = peg$parselargeEpsilon();
      if (s0 === peg$FAILED) {
        s0 = peg$parselargeEta();
        if (s0 === peg$FAILED) {
          s0 = peg$parselargeIota();
          if (s0 === peg$FAILED) {
            s0 = peg$parselargeOmicron();
            if (s0 === peg$FAILED) {
              s0 = peg$parselargeUpsilon();
              if (s0 === peg$FAILED) {
                s0 = peg$parselargeOmega();
                if (s0 === peg$FAILED) {
                  s0 = peg$parselargeBeta();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parselargeGamma();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parselargeDelta();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parselargeZeta();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parselargeKappa();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parselargeLambda();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parselargeMu();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parselargeNu();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parselargeXi();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parselargePi();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parselargeRho();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parselargeSigma();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parselargeTau();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parsesmallAlpha();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parsesmallEpsilon();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsesmallEta();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsesmallIota();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parsesmallOmicron();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parsesmallUpsilon();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parsesmallOmega();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parsesmallBeta();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parsesmallGamma();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parsesmallDelta();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parsesmallZeta();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsesmallKappa();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parsesmallLambda();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parsesmallMu();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parsesmallNu();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parsesmallXi();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parsesmallPi();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parsesmallRho();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parsesmallSigma();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parsesmallTau();
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parselargeAlpha() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (input.charCodeAt(peg$currPos) === 65) {
      s5 = peg$c0;
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s5 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 124) {
        s6 = peg$c1;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s3 = [s3, s4, s5, s6];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f1(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeEpsilon() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (input.charCodeAt(peg$currPos) === 69) {
      s5 = peg$c2;
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s5 !== peg$FAILED) {
      s3 = [s3, s4, s5];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f2(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeEta() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (input.substr(peg$currPos, 2) === peg$c3) {
      s5 = peg$c3;
      peg$currPos += 2;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s5 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 124) {
        s6 = peg$c1;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s3 = [s3, s4, s5, s6];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f3(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeIota() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (input.charCodeAt(peg$currPos) === 73) {
      s5 = peg$c4;
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s5 !== peg$FAILED) {
      s3 = [s3, s4, s5];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f4(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeOmicron() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (input.charCodeAt(peg$currPos) === 79) {
      s5 = peg$c5;
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s5 !== peg$FAILED) {
      s3 = [s3, s4, s5];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f5(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeUpsilon() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s5 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s5 !== peg$FAILED) {
      s3 = [s3, s4, s5];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f6(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeOmega() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (input.substr(peg$currPos, 2) === peg$c6) {
      s5 = peg$c6;
      peg$currPos += 2;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s5 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 124) {
        s6 = peg$c1;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s3 = [s3, s4, s5, s6];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeBeta() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 66) {
      s1 = peg$c7;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f8();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeGamma() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 71) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f9();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeDelta() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 68) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f10();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeZeta() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 90) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f11();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeKappa() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 75) {
      s3 = peg$c11;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 104) {
        s4 = peg$c12;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f12(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeLambda() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 76) {
      s1 = peg$c13;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f13();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeMu() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 77) {
      s1 = peg$c14;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f14();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeNu() {
    var s0;

    s0 = peg$parselargeNasableGammaGamma();
    if (s0 === peg$FAILED) {
      s0 = peg$parselargeNasableGammaKappa();
      if (s0 === peg$FAILED) {
        s0 = peg$parselargeNasableGammaXi();
        if (s0 === peg$FAILED) {
          s0 = peg$parselargeSingleNu();
        }
      }
    }

    return s0;
  }

  function peg$parselargeNasableGammaGamma() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 78) {
      s1 = peg$c15;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselargeGamma();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f15(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselargeNasableGammaKappa() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 78) {
      s1 = peg$c15;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselargeKappa();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f16(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselargeNasableGammaXi() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 78) {
      s1 = peg$c15;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselargeXi();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f17(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselargeSingleNu() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 78) {
      s1 = peg$c15;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f18();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeXi() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 88) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f19();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargePi() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 80) {
      s3 = peg$c17;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s3 !== peg$FAILED) {
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f20(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeRho() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s3 = peg$c18;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (input.charCodeAt(peg$currPos) === 82) {
      s4 = peg$c19;
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s4 !== peg$FAILED) {
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f21(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeSigma() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 83) {
      s1 = peg$c20;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f22();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeTau() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 84) {
      s3 = peg$c21;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 104) {
        s4 = peg$c12;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f23(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallAlpha() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (input.charCodeAt(peg$currPos) === 97) {
      s5 = peg$c22;
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s5 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 124) {
        s6 = peg$c1;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s3 = [s3, s4, s5, s6];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f24(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallEpsilon() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (input.charCodeAt(peg$currPos) === 101) {
      s5 = peg$c23;
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s5 !== peg$FAILED) {
      s3 = [s3, s4, s5];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f25(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallEta() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (input.substr(peg$currPos, 2) === peg$c24) {
      s5 = peg$c24;
      peg$currPos += 2;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s5 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 124) {
        s6 = peg$c1;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s3 = [s3, s4, s5, s6];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f26(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallIota() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (input.charCodeAt(peg$currPos) === 105) {
      s5 = peg$c25;
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s5 !== peg$FAILED) {
      s3 = [s3, s4, s5];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f27(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallOmicron() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (input.charCodeAt(peg$currPos) === 111) {
      s5 = peg$c26;
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s5 !== peg$FAILED) {
      s3 = [s3, s4, s5];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f28(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallUpsilon() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (peg$r6.test(input.charAt(peg$currPos))) {
      s5 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s5 !== peg$FAILED) {
      s3 = [s3, s4, s5];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f29(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallOmega() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (input.substr(peg$currPos, 2) === peg$c27) {
      s5 = peg$c27;
      peg$currPos += 2;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s5 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 124) {
        s6 = peg$c1;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s3 = [s3, s4, s5, s6];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f30(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallBeta() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 98) {
      s1 = peg$c28;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f31();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallGamma() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 103) {
      s1 = peg$c29;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f32();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallDelta() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 100) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f33();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallZeta() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 122) {
      s1 = peg$c31;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f34();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallKappa() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 107) {
      s3 = peg$c32;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 104) {
        s4 = peg$c12;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f35(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallLambda() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 108) {
      s1 = peg$c33;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f36();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallMu() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 109) {
      s1 = peg$c34;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f37();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallNu() {
    var s0;

    s0 = peg$parsesmallNasableGammaGamma();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesmallNasableGammaKappa();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesmallNasableGammaXi();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesmallSingleNu();
        }
      }
    }

    return s0;
  }

  function peg$parsesmallNasableGammaGamma() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 110) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesmallGamma();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f38(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallNasableGammaKappa() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 110) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesmallKappa();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f39(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallNasableGammaXi() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 110) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesmallXi();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f40(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallSingleNu() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 110) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f41();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallXi() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 120) {
      s1 = peg$c36;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f42();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallPi() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 112) {
      s3 = peg$c37;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s3 !== peg$FAILED) {
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f43(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallRho() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (input.charCodeAt(peg$currPos) === 114) {
      s4 = peg$c38;
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s4 !== peg$FAILED) {
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f44(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallSigma() {
    var s0;

    s0 = peg$parsesmallLeadingSigma();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesmallSingleSigma();
    }

    return s0;
  }

  function peg$parsesmallLeadingSigma() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 115) {
      s1 = peg$c39;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsealphabet();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f45(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallSingleSigma() {
    var s0, s1;

    s0 = peg$currPos;
    if (peg$r7.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f46(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallTau() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 116) {
      s3 = peg$c40;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 104) {
        s4 = peg$c12;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f47(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsepunctuation() {
    var s0;

    s0 = peg$parsesemicoron();
    if (s0 === peg$FAILED) {
      s0 = peg$parsequestion();
    }

    return s0;
  }

  function peg$parsesemicoron() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 59) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f48();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsequestion() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 63) {
      s1 = peg$c42;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f49();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenewline() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 13) {
      s3 = peg$c43;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (input.charCodeAt(peg$currPos) === 10) {
      s4 = peg$c44;
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }
    if (s4 !== peg$FAILED) {
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f50(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseanyChar() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f51(s1);
    }
    s0 = s1;

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
